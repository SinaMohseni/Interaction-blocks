<!doctype html>


<html>

<head>
<title> Testing D3 </title>
    
	  <script src= "https://d3js.org/d3.v4.min.js"> </script>
	
</head>

<body>
 <p> Hello World! </p>
 
    <script>
       
	   var counter = 0;
	   
	   d3.select("p").text("ProvVIS!").style("color","blue");
	   d3.select("body")
				.append("p2")
				.style("color", "blue")
				.text("End Canvas!");
	
	d3.json("rawData.json", function(intrct_logs){
	
	var myArray = [20, 60, 90, 80, 35, 60];	
    var total_intr = intrct_logs.length; 	 // myArray.length; 	
	
	
	
	

	
	var height = 800;
    var width = 1600;	
	
	var color = d3.scaleLinear()
				.domain([0, 250, 500, 750, 1000])
				.range(["red", "yellow", "green" , "blue" , "orange"]);
				
	var Opcty = d3.scaleLinear()
				.domain([0, .25, .5, .75, 1])
				.range([0, .25, .5, .75, 1]);			
	
	var widthScaled = d3.scaleLinear()
							.domain([0, 90])
							.range([0, width]);
	

	var myAxis = d3.axisBottom()
					.scale(widthScaled);
     
	// Canvas group
	var myCanvas = d3.select("body")
						.append("svg:svg")
						.attr("width", width)
						.attr("height", height)
						.append("g")
						.attr("transform","translate(50,50)");

	var gradient = myCanvas.append("svg:defs")
  .append("svg:linearGradient")
    .attr("id", "gradient")
    .attr("x1", "0%")
    .attr("y1", "0%")
    .attr("x2", "100%")
    .attr("y2", "0%")
    .attr("spreadMethod", "pad");


	
    // Axis group over myCanvas
	var Axis_layer = myCanvas.append("g")   // append a new group
						.attr("transform","translate(50,400)") 
						.call(myAxis);
						//MyAxis.ticks(d3.timeMinute.every(15));		

	const yPos = 400;
	const xPos = 50;
	const linewidth = 30;
	const clearance = 1;
	var wichRow = 1;
	var Row_fill = [];
	var Bar_position =[];
	Row_fill[1] = 0;
	var mycolor=0;
	// bar group over myCanvas
	var myBar = myCanvas.selectAll("rect")
						.data(intrct_logs)
					 	.enter()
							.append("svg:rect")
							.attr("height", linewidth)
							.attr("width", function(d,i) { return d.duration;})
							.attr("y",function(d,i) {  
							  wichRow = 1;
							  while ( Row_fill[wichRow] > (d.time + xPos) ){  // (d.time + xPos)
							    wichRow ++;
   							  }
							   console.log(i);
    						Row_fill[wichRow] = (d.time + xPos) + d.duration;  							// console.log(Row_fill[wichRow]);  // console.log(i);
							Bar_position[i] = -1*(wichRow)*(linewidth + clearance);
 							return (Bar_position[i] + yPos);}) //   // console.log(i-total_intr/2);    //.attr("y",function(d,i) {  return ((i-total_intr/2)*(linewidth + clearance)) + yPos;}) // console.log(i-total_intr/2);
							.attr("x",  function(d) { return (d.time + xPos); } )
							//.attr("fill", function(d,i) { return color( (d.time)  - Bar_position[i]);})
							.style("fill", function(d,i){	
     mycolor = color(700); //(d.time)  - Bar_position[i]);	
	 console.log(mycolor)
	gradient.append("svg:stop")
    .attr("offset", "0%")
    .attr("stop-color", mycolor)
    .attr("stop-opacity", "0.2");

gradient.append("svg:stop")
    .attr("offset", "100%")
    .attr("stop-color", mycolor)
    .attr("stop-opacity", "1");
	
	mycolor = color(500); //(d.time)  - Bar_position[i]);	
	 console.log(mycolor)
	 
	gradient.append("svg:stop")
    .attr("offset", "0%")
    .attr("stop-color", mycolor)
    .attr("stop-opacity", "0.2");

gradient.append("svg:stop")
    .attr("offset", "100%")
    .attr("stop-color", mycolor)
    .attr("stop-opacity", "1");
	
	return("url(#gradient)");})	

							//.style("fill-opacity", "url(#gradient)")
							//.style("fill-opacity", function(d,i) { 
							//	return Opcty((50+50)/200);})  // d.mouse_over[
							
							.style("stroke", function(d,i) { return color( (d.time)  - Bar_position[i]);});
 
 

	
    var myBar = myCanvas.selectAll("rect")
	
	
	
	
    // Labels over Canvas (Text group)
 	var layer_3 = myCanvas.append("g");											
    var myLabel = layer_3.selectAll("text")
						.data(intrct_logs)
					    .enter()
							.append("text")
							.attr("fill", "black")    // function(d) {counter++; return color(d.time);})
							.attr("y",function(d,i) { return (Bar_position[i]) + (yPos) + (linewidth/2) + (6);}) //   // console.log(i-total_intr/2);    //.attr("y",function(d,i) {  return ((i-total_intr/2)*(linewidth + clearance)) + yPos;}) // console.log(i-total_intr/2);
							.attr("x",  function(d) { return (d.time + xPos + (d.duration / 2) - (30)); })
							//.attr("x", function(d,i) { return ((i-total_intr/2)*(linewidth + clearance)) + yPos + linewidth/2 ;}) // console.log(i-total_intr/2);
							//.attr("y", function(d) { return -xPos;} )
							// .attr("transform", "rotate(90)")
						    .attr("text-anchor", "start")
							.style("fill", "Black")
							
							.text(function(d) {  
							return d.interaction + " " + d.ID ;}) ;  //console.log(d.interaction);
								
								
	});
	
	
 
 
	
    </script>

 
</body>

</html>